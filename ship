#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
    syncExec = require('sync-exec'),
    colors = require('colors'),
    util  = require('util'),
    spawn = require('child_process').spawn,
    spawnSync = require('child_process').spawn,
    spawnargs = require('spawn-args'),
    dockercompose = syncExec('which docker-compose').stdout.replace(/(\r\n|\n|\r)/gm,""),
    YAML = require('yamljs'),
    fs = require('fs')
    //require('shelljs/global');



program
  .version('0.0.1')
  .option('-C, --chdir <path>', 'change the working directory')
  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
  .option('-T, --no-tests', 'ignore test hook')

program
  .command('setup [env]')
  .description('run setup commands for the site(s)')
  //.option("-s, --setup_mode [mode]", "Which setup mode to use.")
  .action(function(env, options){
    //var mode = options.setup_mode || "local";
    env = env || 'local';
    console.log('setup for %s env', env);
    //console.log('setup for %s env with %s mode', env, mode);
  });

program
  .command('exec <cmd> <a')
  .alias('ex')
  .description('execute the given remote cmd inside container')
  .option("-e, --exec_mode <mode>", "Which exec mode to use")
  .option("-c --cwd <cwd>", "Set the working directory inside the container.")
  .action(function(cmd, options){

    cmd = spawnargs(cmd);

    var cmd_command = cmd[0];
    var cmd_args = cmd;
    cmd_args.shift();

    console.log(cmd_command)
    console.log(cmd_args)

    console.log('exec "%s %s" using %s mode', cmd_command, cmd_args, options.exec_mode);


    var dp = spawnSync(cmd_command, cmd_args, { shell: true, cwd: options.cwd || "/" })

    dp.stdin.pipe(process.stdin);
    dp.stdout.pipe(process.stdout);
    dp.stderr.pipe(process.stderr);


  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ ship gulp -e sequential');
    console.log('    $ ship gulp -e async');
    console.log();
  });

program
  .command('start <env>')
  .alias('s')
  .description('starts the docker compose in the given environment')
  .option("-b --branch <branch>", "Which branch to use. (e.g. /feature/vs-13-slider")
  .option("-m --migrate <migrate>", "Wheter to migrate database or not.")
  .action(function(env, options){

    check_reverse_proxy();

    generate_compose(env);

    generate_nginx(env);

    // To Do
    // - docker-compose.yml generieren, je nachdem was für ein Profil ich hab. z.B. Wordpress. Wow, De-Ja-Vu Extreme.
    // - wordpress seite generieren / clonen. Check ob site schon geklont ist. Für alle Branches Ordner anlegen? Am besten konfigurierbar machen.
    
    console.log("Starting Containers");
    /*var dp = spawn(dockercompose, ["up"])

    dp.stdout.on('data', function (data) {
      console.log(data.toString());
    });

    dp.stderr.on('data', function (data) {
      console.log('stderr: ' + data);
    });

    dp.on('exit', function (code) {
      console.log('child process exited with code ' + code);
    });*/

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ ship start -e local');
    console.log('    $ ship start -e dev');
    console.log();
  });

program
  .command('init <type>')
  .alias('i')
  .description('initialize a project using a profile, e.g. wordpress, magento, nodejs, html, php')
  program
  .command('exec <cmd> <a')
  .alias('ex')
  .description('execute the given remote cmd inside container')
  .option("-p, --profile <profile>", "Which exec mode to use. e.G. wordpress, magento, nodejs, ...")
  .action(function(env){
    console.log('deploying "%s"', env);
  });

program
  .command('*')
  .action(function(env){
    console.log('deploying "%s"', env);
  });

program.parse(process.argv);


function check_reverse_proxy () {
  var running = syncExec('docker inspect --format="{{ .State.Running }}" jwilderproxy 2> /dev/null');

  if (running.stdout.indexOf("false") !=-1) {
    console.log("Reverse Proxy not started. Starting...".yellow)
    syncExec("docker start jwilderproxy")
  }

  else if (running.stdout.indexOf("true") !=-1) {
    console.log("Reverse Proxy already running. Nice!".green)
  }

  else {
    console.log("Reverse Proxy not running. Starting...".red)
    syncExec("docker run --name jwilderproxy -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy")
  }
}


function generate_compose (env) {
    // Set environment
    var env = YAML.load( __dirname + '/config/env/' + env+ '.yml');

    env.web.environment.VIRTUAL_HOST = "*." + env.web.environment.URL + "," + env.web.environment.URL;

    // Generate YAML 
    env_yml = YAML.stringify(env, 4);

    fs.writeFile(__dirname + "/docker-compose.override.yml", env_yml, function(err) {
        if(err) throw err; 

        console.log("Yaml file was saved!");
    }); 
}

function generate_nginx (env) {

    var env = YAML.load( __dirname + '/config/env/' + env + '.yml');

    // Set environment
    
    fs.readFile( __dirname + '/config/nginx.conf.template', 'utf-8', function (err, data) {
    if (err) throw err; 

    var result = data.replace(/DOMAIN/g, env.web.environment.URL);

    fs.writeFile( __dirname + '/config/nginx.conf'
      , result, 'utf8', function (err) {
       if (err) throw err;
    });

    });
}
