#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
    syncExec = require('sync-exec'),
    colors = require('colors'),
    util  = require('util'),
    spawn = require('child_process').spawn,
    spawnSync = require('child_process').spawnSync,
    spawnargs = require('spawn-args'),
    dockercompose = syncExec('which docker-compose').stdout.replace(/(\r\n|\n|\r)/gm,""),
    YAML = require('yamljs'),
    fs = require('fs'),
    _ = require('lodash'),
    require('shelljs/global')

var config = require( __dirname + "/config/config.json")

program
  .version('0.0.1')
  .option('-C, --chdir <path>', 'change the working directory')
  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
  .option('-T, --no-tests', 'ignore test hook')

program
  .command('setup [env]')
  .description('run setup commands for the site(s)')
  //.option("-s, --setup_mode [mode]", "Which setup mode to use.")
  .action(function(env, options){
    //var mode = options.setup_mode || "local";
    env = env || 'local';
    console.log('setup for %s env', env);
    //console.log('setup for %s env with %s mode', env, mode);
  });

program
  .command('exec <cmd>')
  .alias('ex')
  .description('execute the given remote cmd inside container')
  .option("-e, --exec_mode <mode>", "Which exec mode to use")
  .option("-c --cwd <cwd>", "Set the working directory inside the container.")
  .action(function(cmd, options){

  var full_command = spawnargs(cmd);

  var command = full_command[0];
  var args = full_command;
  args.shift();

  function shell(command, args) {  
    process.stdin.pause();

    process.stdin.setRawMode(false);

    var ch = require('child_process').spawn(command, args, {
      stdio: [0, 1, 2]
    });

    ch.on('exit', function(test) {
        process.stdin.setRawMode(true);
    });

    ch.on('err', function() {
      console.log("Error!".red)
    });
  }
  shell(command, args);


  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ ship exec "docker-compose up"');
    console.log('    $ ship exec -e async');
    console.log();
  });

program
  .command('start <env>')
  .alias('s')
  .description('starts the docker compose in the given environment')
  .option("-b --branch <branch>", "Which branch to use. (e.g. /feature/vs-13-slider")
  .option("-m --migrate <migrate>", "Wheter to migrate database or not.")
  .action(function(env, options){


    var settings = generate_compose(env);

    check_reverse_proxy();

    generate_nginx(env);


    // Default Branches to clone
    var branches = ["master", "dev", "test"];

    clone_branches(branches, settings)

    setup_branches(branches, settings)

    // Import database. aufpassa, das is anders bei anderen profilen!
    db_import()

    console.log("Starting Containers");

    var dp = spawn(dockercompose, ["up"])

    dp.stdout.on('data', function (data) {
      console.log(data.toString());
    });

    dp.stderr.on('data', function (data) {
      console.log('stderr: ' + data);
    });

    dp.on('exit', function (code) {
      console.log('child process exited with code ' + code);
    });

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ ship start -e local');
    console.log('    $ ship start -e dev');
    console.log();
  });

program
  .command('init <type>')
  .alias('i')
  .description('initialize a project using a profile, e.g. wordpress, magento, nodejs, html, php')
  program
  .command('exec <cmd> <a')
  .alias('ex')
  .description('execute the given remote cmd inside container')
  .option("-p, --profile <profile>", "Which exec mode to use. e.G. wordpress, magento, nodejs, ...")
  .action(function(env){
    console.log('deploying "%s"', env);
  });

program
  .command('*')
  .action(function(env){
    console.log('deploying "%s"', env);
  });

program.parse(process.argv);


function check_reverse_proxy () {
  var running = syncExec('docker inspect --format="{{ .State.Running }}" jwilderproxy 2> /dev/null');

  if (running.stdout.indexOf("false") !=-1) {
    console.log("Reverse Proxy not started. Starting...".yellow)
    syncExec("docker start jwilderproxy")
  }

  else if (running.stdout.indexOf("true") !=-1) {
    console.log("Reverse Proxy already running. Nice!".green)
  }

  else {
    console.log("Reverse Proxy not running. Starting...".red)
    syncExec("docker run --name jwilderproxy -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy")
  }
}


function generate_compose (env) {

    // 1. Load Settings
    var settings = YAML.load( __dirname + '/config/settings.yml');

    // 2. Load Template
    var template = YAML.load( __dirname + '/config/templates/' + config.profile + '.yml');

    // 3. Load Environment
    var env = YAML.load( __dirname + '/config/env/' + env+ '.yml');


    var compose = _.merge(template, settings, env)

    compose.web.environment.VIRTUAL_HOST = "*." + env.web.environment.URL + "," + env.web.environment.URL;

    // Generate YAML 
    env_yml = YAML.stringify(compose, 4);

    fs.writeFile(__dirname + "/docker-compose.yml", env_yml, function(err) {
        if(err) throw err; 

        console.log("Yaml file was saved!");
    }); 

    return compose;
}

function generate_nginx (env) {

    var env = YAML.load( __dirname + '/config/env/' + env + '.yml');

    // Set environment
    
    fs.readFile( __dirname + '/config/nginx.conf.template', 'utf-8', function (err, data) {
    if (err) throw err; 

    var result = data.replace(/DOMAIN/g, env.web.environment.URL);

    fs.writeFile( __dirname + '/config/nginx.conf'
      , result, 'utf8', function (err) {
       if (err) throw err;
    });

    });
}

// TODO: Was machen wir, wenns die Branches noch nicht gibt? Anlegen?
//       Fehlermeldung ausgeben und fragen, ob man erstellen soll?
function clone_branches (branches, settings) {
    for (var key in branches) {
        var branch = branches[key]

        if (branch != "master") 
          folder = branch;
        else
          folder = "www";

        if(!fs.existsSync(__dirname + "/www/" + folder)) {
          console.log("Cloning into " + "www/" + branch)
          var exec = syncExec("git clone -b " + branch + " " + settings.web.environment.SITE_REPO + " " +
                            __dirname + "/www/" + folder)
          console.log(exec)
        } 
        else {
          console.log(__dirname + "/www/" + folder + " already exists!")
        }
    }
}

function setup_branches (branches, settings) {
    for (var key in branches) {
        var branch = branches[key]

        if (branch != "master") 
          folder = branch;
        else
          folder = "www";

        if(fs.existsSync(__dirname + "/www/" + folder)) {
          cd(__dirname + "/www/" + branch)

          console.log("bower install")
          syncExec("bower install");

          console.log("npm install")
          syncExec("npm install");
          
          console.log("Using gulp magic to create css and js for live")
          syncExec("gulp dist");

          // Mit Yeoman ausf√ºhren! Babam
          cd(__dirname + "/www/" + branch + "/www")
          console.log("Set proper wordpress settings")
          syncExec( __dirname + "/tools/wp_config.sh" )

        }
        else {
          console.log("Folder " + __dirname + "/www/" + branch + " does not exist".red)
        }
        
    }
}

function db_import() {

}
